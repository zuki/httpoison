#. TRANSLATORS: Elixir.HTTPoison Summary
#: lib/httpoison.ex:45 
msgid ""
"The HTTP client for Elixir.\n"
"\n"
"The `HTTPoison` module can be used to issue HTTP requests and parse HTTP responses to arbitrary urls.\n"
"\n"
"    iex> HTTPoison.get!(\"https://api.github.com\")\n"
"    %HTTPoison.Response{status_code: 200,\n"
"                        headers: [{\"content-type\", \"application/json\"}],\n"
"                        body: \"{...}\"}\n"
"\n"
"It's very common to use HTTPoison in order to wrap APIs, which is when the\n"
"`HTTPoison.Base` module shines. Visit the documentation for `HTTPoison.Base`\n"
"for more information.\n"
"\n"
"Under the hood, the `HTTPoison` module just uses `HTTPoison.Base` (as\n"
"described in the documentation for `HTTPoison.Base`) without overriding any\n"
"default function.\n"
"\n"
"See `request/5` for more details on how to issue HTTP requests\n"
msgstr ""
#. TRANSLATORS: def HTTPoison.start()
#: lib/httpoison.ex:66 
msgid ""
"Starts HTTPoison and its dependencies.\n"
msgstr ""
#. TRANSLATORS: def HTTPoison.stream_next(async_response)
#: lib/httpoison.ex:66 
msgid ""
"Requests the next message to be streamed for a given `HTTPoison.AsyncResponse`.\n"
"\n"
"See `request!/5` for more detailed information.\n"
msgstr ""
#. TRANSLATORS: def HTTPoison.options(url, headers \\ [], options \\ [])
#: lib/httpoison.ex:66 
msgid ""
"Issues an OPTIONS request to the given url.\n"
"\n"
"Returns `{:ok, response}` if the request is successful, `{:error, reason}`\n"
"otherwise.\n"
"\n"
"See `request/5` for more detailed information.\n"
msgstr ""
#. TRANSLATORS: def HTTPoison.request(method, url, body \\ "", headers \\ [], options \\ [])
#: lib/httpoison.ex:66 
msgid ""
"Issues an HTTP request with the given method to the given url.\n"
"\n"
"This function is usually used indirectly by `get/3`, `post/4`, `put/4`, etc\n"
"\n"
"Args:\n"
"  * `method` - HTTP method as an atom (`:get`, `:head`, `:post`, `:put`,\n"
"    `:delete`, etc.)\n"
"  * `url` - target url as a binary string or char list\n"
"  * `body` - request body. See more below\n"
"  * `headers` - HTTP headers as an orddict (e.g., `[{\"Accept\", \"application/json\"}]`)\n"
"  * `options` - Keyword list of options\n"
"\n"
"Body:\n"
"  * binary, char list or an iolist\n"
"  * `{:form, [{K, V}, ...]}` - send a form url encoded\n"
"  * `{:file, \"/path/to/file\"}` - send a file\n"
"  * `{:stream, enumerable} - lazily send a stream of binaries/charlists\n"
"\n"
"Options:\n"
"  * `:timeout` - timeout to establish a connection, in milliseconds. Default is 8000\n"
"  * `:recv_timeout` - timeout used when receiving a connection. Default is 5000\n"
"  * `:stream_to` - a PID to stream the response to\n"
"  * `:async` - if given `:once`, will only stream one message at a time, requires call to `stream_next`\n"
"  * `:proxy` - a proxy to be used for the request; it can be a regular url\n"
"    or a `{Host, Port}` tuple\n"
"  * `:proxy_auth` - proxy authentication `{User, Password}` tuple\n"
"  * `:ssl` - SSL options supported by the `ssl` erlang module\n"
"  * `:follow_redirect` - a boolean that causes redirects to be followed\n"
"  * `:max_redirect` - an integer denoting the maximum number of redirects to follow\n"
"  * `:params` - an enumerable consisting of two-item tuples that will be appended to the url as query string parameters\n"
"\n"
"Timeouts can be an integer or `:infinity`\n"
"\n"
"This function returns `{:ok, response}` or `{:ok, async_response}` if the\n"
"request is successful, `{:error, reason}` otherwise.\n"
"\n"
"## Examples\n"
"\n"
"    request(:post, \"https://my.website.com\", \"{\\\"foo\\\": 3}\", [{\"Accept\", \"application/json\"}])\n"
"\n"
msgstr ""
#. TRANSLATORS: def HTTPoison.request!(method, url, body \\ "", headers \\ [], options \\ [])
#: lib/httpoison.ex:66 
msgid ""
"Issues an HTTP request with the given method to the given url, raising an\n"
"exception in case of failure.\n"
"\n"
"`request!/5` works exactly like `request/5` but it returns just the\n"
"response in case of a successful request, raising an exception in case the\n"
"request fails.\n"
msgstr ""
#. TRANSLATORS: def HTTPoison.put(url, body \\ "", headers \\ [], options \\ [])
#: lib/httpoison.ex:66 
msgid ""
"Issues a PUT request to the given url.\n"
"\n"
"Returns `{:ok, response}` if the request is successful, `{:error, reason}`\n"
"otherwise.\n"
"\n"
"See `request/5` for more detailed information.\n"
msgstr ""
#. TRANSLATORS: def HTTPoison.put!(url, body \\ "", headers \\ [], options \\ [])
#: lib/httpoison.ex:66 
msgid ""
"Issues a PUT request to the given url, raising an exception in case of\n"
"failure.\n"
"\n"
"If the request does not fail, the response is returned.\n"
"\n"
"See `request!/5` for more detailed information.\n"
msgstr ""
#. TRANSLATORS: def HTTPoison.post(url, body, headers \\ [], options \\ [])
#: lib/httpoison.ex:66 
msgid ""
"Issues a POST request to the given url.\n"
"\n"
"Returns `{:ok, response}` if the request is successful, `{:error, reason}`\n"
"otherwise.\n"
"\n"
"See `request/5` for more detailed information.\n"
msgstr ""
#. TRANSLATORS: def HTTPoison.post!(url, body, headers \\ [], options \\ [])
#: lib/httpoison.ex:66 
msgid ""
"Issues a POST request to the given url, raising an exception in case of\n"
"failure.\n"
"\n"
"If the request does not fail, the response is returned.\n"
"\n"
"See `request!/5` for more detailed information.\n"
msgstr ""
#. TRANSLATORS: def HTTPoison.patch(url, body, headers \\ [], options \\ [])
#: lib/httpoison.ex:66 
msgid ""
"Issues a PATCH request to the given url.\n"
"\n"
"Returns `{:ok, response}` if the request is successful, `{:error, reason}`\n"
"otherwise.\n"
"\n"
"See `request/5` for more detailed information.\n"
msgstr ""
#. TRANSLATORS: def HTTPoison.patch!(url, body, headers \\ [], options \\ [])
#: lib/httpoison.ex:66 
msgid ""
"Issues a PATCH request to the given url, raising an exception in case of\n"
"failure.\n"
"\n"
"If the request does not fail, the response is returned.\n"
"\n"
"See `request!/5` for more detailed information.\n"
msgstr ""
#. TRANSLATORS: def HTTPoison.options!(url, headers \\ [], options \\ [])
#: lib/httpoison.ex:66 
msgid ""
"Issues a OPTIONS request to the given url, raising an exception in case of\n"
"failure.\n"
"\n"
"If the request does not fail, the response is returned.\n"
"\n"
"See `request!/5` for more detailed information.\n"
msgstr ""
#. TRANSLATORS: def HTTPoison.head(url, headers \\ [], options \\ [])
#: lib/httpoison.ex:66 
msgid ""
"Issues a HEAD request to the given url.\n"
"\n"
"Returns `{:ok, response}` if the request is successful, `{:error, reason}`\n"
"otherwise.\n"
"\n"
"See `request/5` for more detailed information.\n"
msgstr ""
#. TRANSLATORS: def HTTPoison.head!(url, headers \\ [], options \\ [])
#: lib/httpoison.ex:66 
msgid ""
"Issues a HEAD request to the given url, raising an exception in case of\n"
"failure.\n"
"\n"
"If the request does not fail, the response is returned.\n"
"\n"
"See `request!/5` for more detailed information.\n"
msgstr ""
#. TRANSLATORS: def HTTPoison.get(url, headers \\ [], options \\ [])
#: lib/httpoison.ex:66 
msgid ""
"Issues a GET request to the given url.\n"
"\n"
"Returns `{:ok, response}` if the request is successful, `{:error, reason}`\n"
"otherwise.\n"
"\n"
"See `request/5` for more detailed information.\n"
msgstr ""
#. TRANSLATORS: def HTTPoison.get!(url, headers \\ [], options \\ [])
#: lib/httpoison.ex:66 
msgid ""
"Issues a GET request to the given url, raising an exception in case of\n"
"failure.\n"
"\n"
"If the request does not fail, the response is returned.\n"
"\n"
"See `request!/5` for more detailed information.\n"
msgstr ""
#. TRANSLATORS: def HTTPoison.delete(url, headers \\ [], options \\ [])
#: lib/httpoison.ex:66 
msgid ""
"Issues a DELETE request to the given url.\n"
"\n"
"Returns `{:ok, response}` if the request is successful, `{:error, reason}`\n"
"otherwise.\n"
"\n"
"See `request/5` for more detailed information.\n"
msgstr ""
#. TRANSLATORS: def HTTPoison.delete!(url, headers \\ [], options \\ [])
#: lib/httpoison.ex:66 
msgid ""
"Issues a DELETE request to the given url, raising an exception in case of\n"
"failure.\n"
"\n"
"If the request does not fail, the response is returned.\n"
"\n"
"See `request!/5` for more detailed information.\n"
msgstr ""
