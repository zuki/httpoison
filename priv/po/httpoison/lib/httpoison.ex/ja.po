msgid ""
msgstr ""
"Project-Id-Version: \n"
"PO-Revision-Date: 2017-02-27 15:46+0900\n"
"Last-Translator: Keiji Suzuki <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"POT-Creation-Date: \n"
"X-Generator: Poedit 1.8.12\n"

#. TRANSLATORS: Elixir.HTTPoison Summary
#: lib/httpoison.ex:45
msgid ""
"The HTTP client for Elixir.\n"
"\n"
"The `HTTPoison` module can be used to issue HTTP requests and parse HTTP "
"responses to arbitrary urls.\n"
"\n"
"    iex> HTTPoison.get!(\"https://api.github.com\")\n"
"    %HTTPoison.Response{status_code: 200,\n"
"                        headers: [{\"content-type\", \"application/json"
"\"}],\n"
"                        body: \"{...}\"}\n"
"\n"
"It's very common to use HTTPoison in order to wrap APIs, which is when the\n"
"`HTTPoison.Base` module shines. Visit the documentation for `HTTPoison."
"Base`\n"
"for more information.\n"
"\n"
"Under the hood, the `HTTPoison` module just uses `HTTPoison.Base` (as\n"
"described in the documentation for `HTTPoison.Base`) without overriding any\n"
"default function.\n"
"\n"
"See `request/5` for more details on how to issue HTTP requests\n"
msgstr ""
"Elixir用のHTTPクライアント。\n"
"\n"
"`HTTPoison`モジュールは、任意のURLへのHTTPリクエストの発行およびHTTPレスポン"
"スのパースに使用できる。\n"
"\n"
"    iex> HTTPoison.get!(\"https://api.github.com\")\n"
"    %HTTPoison.Response{status_code: 200,\n"
"                        headers: [{\"content-type\", \"application/json"
"\"}],\n"
"                        body: \"{...}\"}\n"
"\n"
"APIのラップにHTTPoisonを使用するのはまったく普通のことで、\n"
"`HTTPoison.Base`モジュールが輝くときである。詳細は`HTTPoison.Base`\n"
"のドキュメントを参照のこと。\n"
"\n"
"`HTTPoison`モジュールは内部では（`HTTPoison.Base`のドキュメントに書いて\n"
"あるように）デフォルト関数を上書きすることもなく`HTTPoison.Base`モジュール"
"を\n"
"そのまま使用している。\n"
"\n"
"HTTPリクエストの発行方法については`request/5`を参照のこと。\n"

#. TRANSLATORS: def HTTPoison.start()
#: lib/httpoison.ex:66
msgid "Starts HTTPoison and its dependencies.\n"
msgstr "HTTPoisonと依存モジュールを起動する。\n"

#. TRANSLATORS: def HTTPoison.stream_next(async_response)
#: lib/httpoison.ex:66
msgid ""
"Requests the next message to be streamed for a given `HTTPoison."
"AsyncResponse`.\n"
"\n"
"See `request!/5` for more detailed information.\n"
msgstr ""
"指定した`HTTPoison.AsyncResponse`から次のメッセージを\n"
"流すようリクエストする。\n"
"\n"
"詳細は`request!/5`を参照のこと。\n"

#. TRANSLATORS: def HTTPoison.options(url, headers \\ [], options \\ [])
#: lib/httpoison.ex:66
msgid ""
"Issues an OPTIONS request to the given url.\n"
"\n"
"Returns `{:ok, response}` if the request is successful, `{:error, reason}`\n"
"otherwise.\n"
"\n"
"See `request/5` for more detailed information.\n"
msgstr ""
"指定したURLにOPTIONSリクエストを発行する。\n"
"\n"
"リクエストが成功した場合は`{:ok, response}`を、それ以外は\n"
"`{:error, reason}`を返す。\n"
"\n"
"詳細は`request/5`を参照のこと。\n"

#. TRANSLATORS: def HTTPoison.request(method, url, body \\ "", headers \\ [], options \\ [])
#: lib/httpoison.ex:66
msgid ""
"Issues an HTTP request with the given method to the given url.\n"
"\n"
"This function is usually used indirectly by `get/3`, `post/4`, `put/4`, etc\n"
"\n"
"Args:\n"
"  * `method` - HTTP method as an atom (`:get`, `:head`, `:post`, `:put`,\n"
"    `:delete`, etc.)\n"
"  * `url` - target url as a binary string or char list\n"
"  * `body` - request body. See more below\n"
"  * `headers` - HTTP headers as an orddict (e.g., `[{\"Accept\", "
"\"application/json\"}]`)\n"
"  * `options` - Keyword list of options\n"
"\n"
"Body:\n"
"  * binary, char list or an iolist\n"
"  * `{:form, [{K, V}, ...]}` - send a form url encoded\n"
"  * `{:file, \"/path/to/file\"}` - send a file\n"
"  * `{:stream, enumerable} - lazily send a stream of binaries/charlists\n"
"\n"
"Options:\n"
"  * `:timeout` - timeout to establish a connection, in milliseconds. Default "
"is 8000\n"
"  * `:recv_timeout` - timeout used when receiving a connection. Default is "
"5000\n"
"  * `:stream_to` - a PID to stream the response to\n"
"  * `:async` - if given `:once`, will only stream one message at a time, "
"requires call to `stream_next`\n"
"  * `:proxy` - a proxy to be used for the request; it can be a regular url\n"
"    or a `{Host, Port}` tuple\n"
"  * `:proxy_auth` - proxy authentication `{User, Password}` tuple\n"
"  * `:ssl` - SSL options supported by the `ssl` erlang module\n"
"  * `:follow_redirect` - a boolean that causes redirects to be followed\n"
"  * `:max_redirect` - an integer denoting the maximum number of redirects to "
"follow\n"
"  * `:params` - an enumerable consisting of two-item tuples that will be "
"appended to the url as query string parameters\n"
"\n"
"Timeouts can be an integer or `:infinity`\n"
"\n"
"This function returns `{:ok, response}` or `{:ok, async_response}` if the\n"
"request is successful, `{:error, reason}` otherwise.\n"
"\n"
"## Examples\n"
"\n"
"    request(:post, \"https://my.website.com\", \"{\\\"foo\\\": 3}\", "
"[{\"Accept\", \"application/json\"}])\n"
"\n"
msgstr ""
"指定したURLに指定したメソッドのHTTPリクエストを発行する。\n"
"\n"
"通常、この関数は、`get/3`, `post/4`, `put/4`などにより間接的に使用される。\n"
"\n"
"引数:\n"
"  * `method` - HTTPメソッド。アトムで指定 (`:get`, `:head`, `:post`, `:"
"put`,\n"
"    `:delete`など.)\n"
"  * `url` - 対象となるURL。バイナリ文字列または文字のリストで指定\n"
"  * `body` - リクエストボディ。以下を参照。\n"
"  * `headers` - HTTPヘッダ。 orddictで指定（たとえば、`[{\"Accept\", "
"\"application/json\"}]`)\n"
"  * `options` - オプション。キーワードリストで指定\n"
"\n"
"ボディ:\n"
"  * バイナリ、文字のリスト、または、IOリスト\n"
"  * `{:form, [{K, V}, ...]}` - URLエンコーディングされたフォームを送信\n"
"  * `{:file, \"/path/to/file\"}` - ファイルを送信\n"
"  * `{:stream, enumerable}` - バイナリまたは文字のリストのストリームを遅延送"
"信\n"
"\n"
"オプション:\n"
"  * `:timeout` - コネクション確立のタイムアウト。ミリ秒単位。デフォルトは"
"8000\n"
"  * `:recv_timeout` - コネクション受信のタイムアウト。デフォルトは5000\n"
"  * `:stream_to` - 応答するストリームのPID\n"
"  * `:async` - `:once`の場合、１回に１メッセージのみレスポンスを流し、\n"
"    次のレスポンス受信には`stream_next`の呼び出しが必要。\n"
"  * `:proxy` - リクエストの際に使用するプロキシ情報。URLまたは\n"
"    タプル`{Host、Port}`\n"
"  * `:proxy_auth` - プロキシの認証情報。タブル`{User, Password}`\n"
"  * `:ssl` - `ssl` EalangモジュールでサポートされているSSLオプション\n"
"  * `:follow_redirect` - リダイレクトに従うか否かを決める論理値\n"
"  * `:max_redirect` - リダイレクトの最大数を示す整数\n"
"  * `:params` - ２要素タプルで構成されたEnumerable。クエリ文字列パラメタと\n"
"    してURLに追加される\n"
"\n"
"タイムアウトには整数か`:infinity`を指定できる。\n"
"\n"
"この関数は、リクエストが成功した場合は`{:ok, response}`を、それ以外は\n"
"`{:error, reason}`を返す。\n"
"\n"
"## 例\n"
"\n"
"    request(:post, \"https://my.website.com\", \"{\\\"foo\\\": 3}\", "
"[{\"Accept\", \"application/json\"}])\n"
"\n"

#. TRANSLATORS: def HTTPoison.request!(method, url, body \\ "", headers \\ [], options \\ [])
#: lib/httpoison.ex:66
msgid ""
"Issues an HTTP request with the given method to the given url, raising an\n"
"exception in case of failure.\n"
"\n"
"`request!/5` works exactly like `request/5` but it returns just the\n"
"response in case of a successful request, raising an exception in case the\n"
"request fails.\n"
msgstr ""
"指定したURLに指定したメソッドのHTTPリクエストを発行する。\n"
"失敗した場合は例外を発生させる。\n"
"\n"
"`request!/5`の働きは`request/5`とまったく同じであるが、リクエストが\n"
"成功した場合はレスポンスだけを返し、リクエストが失敗した場合は\n"
"例外を発生させる。\n"

#. TRANSLATORS: def HTTPoison.put(url, body \\ "", headers \\ [], options \\ [])
#: lib/httpoison.ex:66
msgid ""
"Issues a PUT request to the given url.\n"
"\n"
"Returns `{:ok, response}` if the request is successful, `{:error, reason}`\n"
"otherwise.\n"
"\n"
"See `request/5` for more detailed information.\n"
msgstr ""
"指定したURLにPUTリクエストを発行する。\n"
"\n"
"リクエストが成功した場合は`{:ok, response}`を、それ以外は\n"
"`{:error, reason}`を返す。\n"
"\n"
"詳細は`request/5`を参照のこと。\n"

#. TRANSLATORS: def HTTPoison.put!(url, body \\ "", headers \\ [], options \\ [])
#: lib/httpoison.ex:66
msgid ""
"Issues a PUT request to the given url, raising an exception in case of\n"
"failure.\n"
"\n"
"If the request does not fail, the response is returned.\n"
"\n"
"See `request!/5` for more detailed information.\n"
msgstr ""
"指定したURLにPUTリクエストを発行する。失敗した場合は\n"
"例外を発生させる。\n"
"\n"
"リクエストが失敗しなかった場合は、レスポンスを返す。\n"
"\n"
"詳細は`request!/5`を参照のこと。\n"

#. TRANSLATORS: def HTTPoison.post(url, body, headers \\ [], options \\ [])
#: lib/httpoison.ex:66
msgid ""
"Issues a POST request to the given url.\n"
"\n"
"Returns `{:ok, response}` if the request is successful, `{:error, reason}`\n"
"otherwise.\n"
"\n"
"See `request/5` for more detailed information.\n"
msgstr ""
"指定したURLにPOSTリクエストを発行する。\n"
"\n"
"リクエストが成功した場合は`{:ok, response}`を、それ以外は\n"
"`{:error, reason}`を返す。\n"
"\n"
"詳細は`request/5`を参照のこと。\n"

#. TRANSLATORS: def HTTPoison.post!(url, body, headers \\ [], options \\ [])
#: lib/httpoison.ex:66
msgid ""
"Issues a POST request to the given url, raising an exception in case of\n"
"failure.\n"
"\n"
"If the request does not fail, the response is returned.\n"
"\n"
"See `request!/5` for more detailed information.\n"
msgstr ""
"指定したURLにPOSTリクエストを発行する。失敗した場合は\n"
"例外を発生させる。\n"
"\n"
"リクエストが失敗しなかった場合は、レスポンスを返す。\n"
"\n"
"詳細は`request!/5`を参照のこと。\n"

#. TRANSLATORS: def HTTPoison.patch(url, body, headers \\ [], options \\ [])
#: lib/httpoison.ex:66
msgid ""
"Issues a PATCH request to the given url.\n"
"\n"
"Returns `{:ok, response}` if the request is successful, `{:error, reason}`\n"
"otherwise.\n"
"\n"
"See `request/5` for more detailed information.\n"
msgstr ""
"指定したURLにPATCHリクエストを発行する。\n"
"\n"
"リクエストが成功した場合は`{:ok, response}`を、それ以外は\n"
"`{:error, reason}`を返す。\n"
"\n"
"詳細は`request/5`を参照のこと。\n"

#. TRANSLATORS: def HTTPoison.patch!(url, body, headers \\ [], options \\ [])
#: lib/httpoison.ex:66
msgid ""
"Issues a PATCH request to the given url, raising an exception in case of\n"
"failure.\n"
"\n"
"If the request does not fail, the response is returned.\n"
"\n"
"See `request!/5` for more detailed information.\n"
msgstr ""
"指定したURLにPATCHリクエストを発行する。失敗した場合は\n"
"例外を発生させる。\n"
"\n"
"リクエストが失敗しなかった場合は、レスポンスを返す。\n"
"\n"
"詳細は`request!/5`を参照のこと。\n"

#. TRANSLATORS: def HTTPoison.options!(url, headers \\ [], options \\ [])
#: lib/httpoison.ex:66
msgid ""
"Issues a OPTIONS request to the given url, raising an exception in case of\n"
"failure.\n"
"\n"
"If the request does not fail, the response is returned.\n"
"\n"
"See `request!/5` for more detailed information.\n"
msgstr ""
"指定したURLにOPTIONSリクエストを発行する。失敗した場合は\n"
"例外を発生させる。\n"
"\n"
"リクエストが失敗しなかった場合は、レスポンスを返す。\n"
"\n"
"詳細は`request!/5`を参照のこと。\n"

#. TRANSLATORS: def HTTPoison.head(url, headers \\ [], options \\ [])
#: lib/httpoison.ex:66
msgid ""
"Issues a HEAD request to the given url.\n"
"\n"
"Returns `{:ok, response}` if the request is successful, `{:error, reason}`\n"
"otherwise.\n"
"\n"
"See `request/5` for more detailed information.\n"
msgstr ""
"指定したURLにHEADリクエストを発行する。\n"
"\n"
"リクエストが成功した場合は`{:ok, response}`を、それ以外は\n"
"`{:error, reason}`を返す。\n"
"\n"
"詳細は`request/5`を参照のこと。\n"

#. TRANSLATORS: def HTTPoison.head!(url, headers \\ [], options \\ [])
#: lib/httpoison.ex:66
msgid ""
"Issues a HEAD request to the given url, raising an exception in case of\n"
"failure.\n"
"\n"
"If the request does not fail, the response is returned.\n"
"\n"
"See `request!/5` for more detailed information.\n"
msgstr ""
"指定したURLにHEADリクエストを発行する。失敗した場合は\n"
"例外を発生させる。\n"
"\n"
"リクエストが失敗しなかった場合は、レスポンスを返す。\n"
"\n"
"詳細は`request!/5`を参照のこと。\n"

#. TRANSLATORS: def HTTPoison.get(url, headers \\ [], options \\ [])
#: lib/httpoison.ex:66
msgid ""
"Issues a GET request to the given url.\n"
"\n"
"Returns `{:ok, response}` if the request is successful, `{:error, reason}`\n"
"otherwise.\n"
"\n"
"See `request/5` for more detailed information.\n"
msgstr ""
"指定したURLにGETリクエストを発行する。\n"
"\n"
"リクエストが成功した場合は`{:ok, response}`を、それ以外は\n"
"`{:error, reason}`を返す。\n"
"\n"
"詳細は`request/5`を参照のこと。\n"

#. TRANSLATORS: def HTTPoison.get!(url, headers \\ [], options \\ [])
#: lib/httpoison.ex:66
msgid ""
"Issues a GET request to the given url, raising an exception in case of\n"
"failure.\n"
"\n"
"If the request does not fail, the response is returned.\n"
"\n"
"See `request!/5` for more detailed information.\n"
msgstr ""
"指定したURLにDELETEリクエストを発行する。失敗した場合は\n"
"例外を発生させる。\n"
"\n"
"リクエストが失敗しなかった場合は、レスポンスを返す。\n"
"\n"
"詳細は`request!/5`を参照のこと。\n"

#. TRANSLATORS: def HTTPoison.delete(url, headers \\ [], options \\ [])
#: lib/httpoison.ex:66
msgid ""
"Issues a DELETE request to the given url.\n"
"\n"
"Returns `{:ok, response}` if the request is successful, `{:error, reason}`\n"
"otherwise.\n"
"\n"
"See `request/5` for more detailed information.\n"
msgstr ""
"指定したURLにDELETEリクエストを発行する。\n"
"\n"
"リクエストが成功した場合は`{:ok, response}`を、それ以外は\n"
"`{:error, reason}`を返す。\n"
"\n"
"詳細は`request/5`を参照のこと。\n"

#. TRANSLATORS: def HTTPoison.delete!(url, headers \\ [], options \\ [])
#: lib/httpoison.ex:66
msgid ""
"Issues a DELETE request to the given url, raising an exception in case of\n"
"failure.\n"
"\n"
"If the request does not fail, the response is returned.\n"
"\n"
"See `request!/5` for more detailed information.\n"
msgstr ""
"指定したURLにDELETEリクエストを発行する。失敗した場合は\n"
"例外を発生させる。\n"
"\n"
"リクエストが失敗しなかった場合は、レスポンスを返す。\n"
"\n"
"詳細は`request!/5`を参照のこと。\n"
