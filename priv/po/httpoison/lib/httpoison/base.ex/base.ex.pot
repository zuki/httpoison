#. TRANSLATORS: Elixir.HTTPoison.Base Summary
#: lib/httpoison/base.ex:2 
msgid ""
"Provides a default implementation for HTTPoison functions.\n"
"\n"
"This module is meant to be `use`'d in custom modules in order to wrap the\n"
"functionalities provided by HTTPoison. For example, this is very useful to\n"
"build API clients around HTTPoison:\n"
"\n"
"    defmodule GitHub do\n"
"      use HTTPoison.Base\n"
"\n"
"      @endpoint \"https://api.github.com\"\n"
"\n"
"      def process_url(url) do\n"
"        @endpoint <> url\n"
"      end\n"
"    end\n"
"\n"
"The example above shows how the `GitHub` module can wrap HTTPoison\n"
"functionalities to work with the GitHub API in particular; this way, for\n"
"example, all requests done through the `GitHub` module will be done to the\n"
"GitHub API:\n"
"\n"
"    GitHub.get(\"/users/octocat/orgs\")\n"
"    #=> will issue a GET request at https://api.github.com/users/octocat/orgs\n"
"\n"
"## Overriding functions\n"
"\n"
"`HTTPoison.Base` defines the following list of functions, all of which can be\n"
"overridden (by redefining them). The following list also shows the typespecs\n"
"for these functions and a short description.\n"
"\n"
"    # Called in order to process the url passed to any request method before\n"
"    # actually issuing the request.\n"
"    @spec process_url(binary) :: binary\n"
"    def process_url(url)\n"
"\n"
"    # Called to arbitrarily process the request body before sending it with the\n"
"    # request.\n"
"    @spec process_request_body(term) :: binary\n"
"    def process_request_body(body)\n"
"\n"
"    # Called to arbitrarily process the request headers before sending them\n"
"    # with the request.\n"
"    @spec process_request_headers(term) :: [{binary, term}]\n"
"    def process_request_headers(headers)\n"
"\n"
"    # Called before returning the response body returned by a request to the\n"
"    # caller.\n"
"    @spec process_response_body(binary) :: term\n"
"    def process_response_body(body)\n"
"\n"
"    # Used when an async request is made; it's called on each chunk that gets\n"
"    # streamed before returning it to the streaming destination.\n"
"    @spec process_response_chunk(binary) :: term\n"
"    def process_response_chunk(chunk)\n"
"\n"
"    # Called to process the response headers before returning them to the\n"
"    # caller.\n"
"    @spec process_headers([{binary, term}]) :: term\n"
"    def process_headers(headers)\n"
"\n"
"    # Used to arbitrarily process the status code of a response before\n"
"    # returning it to the caller.\n"
"    @spec process_status_code(integer) :: term\n"
"    def process_status_code(status_code)\n"
"\n"
msgstr ""
